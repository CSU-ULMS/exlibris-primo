module Exlibris
  module Primo
    # == Overview
    # Exlibris::Primo::Record is an abstract representation of a Primo record.
    # An instance of Exlibris::Primo::Record can be created by passing
    # in a hash with setup parameters.
    # Valid parameters include:
    #   :base_url, :resolver_base_url, :vid, :institution, :record_id, :record
    # A URL to the native record (dlDisplay.do) and an OpenUrl are generated by default.
    # If no resolver_base_url is provided, an OpenUrl querystring will be returned.
    # A raw_xml attribute is generated either by the record XML passed in or by fetching it from the record_id.
    # By default the raw_xml is not included in the hash representation, but can be overridden to.
    #
    # == Tips on Extending
    # When extending the class, a few basics guidelines should be observed.
    # 1.  A Exlibris::Primo::Record is initialized from a Hash of parameters.
    #     These params are used to create instance variables of the record attributes.
    #
    # 2.  The following methods are available for overriding:
    #     to_h -    if a sub class creates more instance variables, these should be added to the hash
    #     raw  -    cleans up characters and spaces in raw record and wraps in <record /> tag, implementations may differ
    #
    # == Examples of usage
    #   Record.new({ :base_url => @base_url, :vid => @vid, :record => doc.at("//record") })
    class Record
      require 'nokogiri'
      include Namespaces
      include SetAttributes
      include XmlUtil
      include Exlibris::Primo::Pnx::DedupMgr
      include Exlibris::Primo::Pnx::Holdings
      include Exlibris::Primo::Pnx::Openurl
      include Exlibris::Primo::Pnx::RelatedLinks
      include Exlibris::Primo::Pnx::Rsrcs
      include Exlibris::Primo::Pnx::Tocs
      attr_accessor :vid, :institution, :config

      #
      # 
      #
      def initialize(attributes={})
        @raw_xml = attributes.delete(:raw_xml)
        set_attributes attributes
        vid = "DEFAULT" if vid.nil?
        institution = "PRIMO" if institution.nil?
        config = {} if config.nil?
      end

      #
      # 
      #
      def url
        @url ||= "/primo_library/libweb/action/dlDisplay.do?dym=false&onCampus=false&docId=#{record_id}&institution=#{institution}&vid=#{vid}"
      end

      #
      # 
      #
      def method_missing(method, *args, &block)
        if(attr_read(method))
          self.class.send(:define_method, method) {
            eval("@#{method} ||= \"#{attr_read method}\"")
          }
          send method, *args, &block
        else
          super
        end
      end

      #
      # 
      #
      def respond_to?(method, include_private=false)
        (attr_read(method).nil?) ?  
          (defined? super) ? super : false : true
      end

      #
      # 
      #
      def respond_to_missing?(method, include_private=false)
        (not respond_to?(method, include_private)) ?  
          (defined? super) ? super : false : true
      end

      def attr_read method
        inner_text_at(xpathize(method)) || inner_text_at(controlize(method))
      end
      private :attr_read

      def inner_text_at xpath
        xml_at = xml.root.at(xpath)
        return xml_at.inner_text unless xml_at.nil?
        return nil
      end
      private :inner_text_at

      def controlize s
        "control/#{xpathize s}"
      end
      private :controlize

      def xpathize s
        "#{s}".gsub(/_/, "/")
      end
      private :xpathize
    end
  end
end